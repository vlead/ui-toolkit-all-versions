<!-- This file needs to be edited by the lab developer to suit
the requirements of their lab in particular.-->

<!-- Add class="default" to include any element as it is
specified in default.html. 
Do not include class="default" to the elements that you want to
edit -->

<!DOCTYPE html>
<html>
<head></head>
<body>

<div id="experiment"> <!-- The Experiment Document Container-->

  <!-- The lab Header contains the logo and the name of the lab,
  usually displayed on the top of the page-->

  <header id="experiment-header" class="default">
  
    <div id="experiment-header-logo" class="logo">
      <!-- Enclose the logo image of your lab or write it in 
      text-->
      <img src="../images/logo.jpg" />
    </div>

    <div id="experiment-header-heading" class="heading">
      <!-- Write the name of your lab and link it to the home 
      page of your lab (h1 tag is preferred while writing your 
      lab name)-->
      <a href="../index.php">Data Structures</a>	
    </div>

    <!-- Add any additional element you want to add to the lab 
    header, For example : Help (Enclosing them with suitable 
    div is recommended)-->

  </header>


  <!-- The lab article is the main content area where all the 
  experiment content sits-->
  <article id="experiment-article">
  
    <!-- The lab article has an header, optional navigational 
    menu, number of sections, an optional sidebar and a closing 
    footer-->
     <div id="experiment-article-breadcrumb" class="breadcrumb">
     </div>
    
      <header id="experiment-article-heading" class="heading">
        <!-- You can add a welcome message or title of the 
        experiment here -->
       Expression Evaluation
        <!-- Add any additional element if required with proper 
        enclosing-->
      </header>

      <!-- Navigation menu is useful to organize the view of 
      multiple sections inside the article-->
      <nav id="experiment-article-navigation" class="default">
        <ul id="experiment-article-navigation-menu">
          <!-- The menu can be dynamically generated to contain 
          the headings of your sections or instead write the 
          menu items of your choice individually enclosedu in 
          <li> tag as shown below-->
        </ul>
      </nav>

      <!-- All the sections of your lab or experiment can be 
      enclosed together with a div element as shown below-->
      <div id="experiment-article-sections">

        <!-- First section of the article-->
        <section id="experiment-article-section-1">
          
          <div id="experiment-article-section-1-icon" 
          class="icon">
	    <!-- Enclose the icon image of your lab -->
	    <img src="../images/introduction.jpg" />
	  </div>	
          
          <!-- The heading for the section can be enclosed in a 
          div tag. -->
          <div id="experiment-article-section-1-heading" 
          class="heading">
            Introduction
          </div>

          <!-- Write the section content inside a paragraph 
          element, You can also include images with <img> tag -->
          <div id="experiment-article-section-1-content" 
          class="content">	
            <p>
          This experiment guides you using stacks in a practical example. Stacks are an important data structure and finds applications where essentially the data item that is stored latest is what needs to be accessed first. Examples of applications of stakcs in natural settings include a stack of books on a table. Typically, as you pile books on a desk, the book that you can access instantly is the one that you placed at the latest time.
A good computing application of stacks is to use it to evaluating arithmetical expressions. In this experiment, we will go through the entire expression evaluation process. The attached notes and the slides describe the technical details. The animation can help you understand the process via several examples. Use these resources to develop code for your own expression evaluator. To add a good interface, you can consider a small web interface where in one can type an expression and ask for it to be evaluated. Think of Google which can do this for most expressions. </p>
      </div>


      </section>

      <!-- Second section of the article-->
      <section id="experiment-article-section-2">
        
        <div id="experiment-article-section-2-icon" 
        class="icon">
	  <!-- Enclose the icon image of your lab. -->
	  <img src="../images/theory.jpg" />
	</div>
				
        <!-- The heading for the section can be enclosed in a 
        div tag. -->
        <div id="experiment-article-section-2-heading" 
        class="heading">
          Theory
        </div>


        <!-- Write the section content inside a paragraph 
        element, we can also include images with <img> tag -->
        <div id="experiment-article-section-2-content" 
        class="content">
          <p>

	 

<h3>1.1 The Stack Data Structure</h3>
<li>
The stack data structure is characterized by its last-in-first-out access mechanism. Thus, the element that is added most recently will be the element that is removed first on a remove call. Such an order of addition and deletion of items occurs in several natural settings. Consider for example, a stack of plates in a cafeteria.The first plate that is taken out is the plate that is on the top of the pile. This plate would be the one that is added to the pile most recently.</li>
<li>Another example could be as follows. We are all used to text editors that allow for undo and redo operations. In such an editor, suppose S is the present text and a word w1 is deleted to get S&prime;. Then a word w2 is deleted. Now, the user wishes to undo some of the changes. To get the correct result, it is possible only if all the operations done after w1 is deleted are also undone. Moreover, these operations must be performed in their reverse order. Thus, we need a mechanism to associate a stored set of items.Irrespective of the implemenation mechanism, the stack data structure has the following basic operations.Let S be a stack.<li> create&nbsp;:Create an empty stack.</li><li>
 push(element) : Pushes the item element to the top of the stack.</li><li>pop() : Returns the item that is most recently pushed.</li><li> size() : Return the size of the stack.</li></ul> </p>
 
<p><li><h3>1.2 Applications of Stacks</h3>
<h4>1.2.1 Expression Evaluation</h4><li>
One of the prominent applications of stacks is to expression evaluation. Consider a table calculator which
evaluates arithemetic expressions involving addition, multiplication, subtraction, and division. For example,2+3 * 5 - 7 is a valid expression. The result of the above expression is 10 as multiplication has precedenceover addition and subtraction. To disambiguate, one also uses parantesis and write the same expression as 2+ (3*5) - 7. However, it would be quite cumbersome to use parantheses when especially, the precedence is known.Hence, one needs to first convert a given expression into an non-ambiguous model so that evaluation can be done easily. There are three ways to write an expression. The above way of writing expressions is called the infix notation because the operators are placed in between the two operators. There are other ways of writing an expression. In the prefix notation, operators preceede the operands. So the above expression would be written as -+*3 5 2 7. In the postfix notation, the operators are written after the operands. The postfix equivalent way of writing the above expression would be 3 5* 2 + 7 -. It turns out that the postfix and prefix notations are free of ambiguity. We will how that is the case first and then see how to convert a given expression in the infix form to its prefix form.</li>
<li><h4>1.2.2 Evaluating a Postfix Expression</h4></li>
<li>
Consider an expression given in the postifix notation. We now see how to evaluate such an expression.
For example, ab * c + is a postifix expression. Since the operators follow the operands, it is intuitive to see if the previously available two operands are the corresponding operands for a given operator. This intuition serves well and is correct.So, when processing a postfix expression from left to right, when we encounter an operator, we have to apply the operation to the two most recent operands. This suggests that the operands should be placed on a stack.	   </li> </li>
</p>
<p>
<h3> 2.1 The Queue Data Structure </h3>
<li>
In the previous section, we have seen a new way of access model to the array can result in good solutions to important applications. A queue is another such data strucure which supports operations such as insert
and delete. One can think of analogies to several situations such as a queue at a ticket reservation office, an operating system job queue, or a queue of aeroplanes ready to take off. In all such settings, the element or the object that is first inserted is the first one to come out of the queue also. Thus, the queue is a First-In- First-Out (FIFO) data structure. This suggests that there are two quantities associated with a queue, the front and the rear. The rear indicates the position where the new elements would be added. The front indicates the position from where elements can be deleted from the queue.Formally, a queue is a data structure which supports the following operations.</li><li>& insert: Insert an element to the rear of the queue</li><li>delete: Delete an element from the front of the queue.</li><li>size: Return the size of the queue</li>
</div> </p>

      </section>


      <section id="experiment-article-section-3">
        
        <div id="experiment-article-section-3-icon" 
        class="icon">
	  <!-- Enclose the icon image of your lab. -->
	  <img src="../images/objective.jpg" />
	</div>
     
        <div id="experiment-article-section-3-heading" 
        class="heading">
          Objective
        </div>

        <div id="experiment-article-section-3-content" 
        class="content">
          <p>
          At the end of this experiment, you will be able to:
<p> * Use stacks to evaluate expressions
<p> * Know applications of stacks.
<p> * Set up a web based calculator
          </p>

        </div>

      </section>


      <section id="experiment-article-section-4">

        <div id="experiment-article-section-4-icon" 
        class="icon">
	  <!-- Enclose the icon image of your lab.-->
	  <img src="../images/simulation.jpg" />
	</div>

        <div id="experiment-article-section-4-heading" 
        class="heading">
	   Simulation
        </div>

        <div id="experiment-article-section-4-content" 
        class="content">
          <p>
<ul>
   <li>See how expressions can be evaluated using stacks <a href="#" onClick='window.open("calc3.swf","Expression Evaluation","height=800,width=800")'>Expression Evaluation</a></li>
</ul>
          </p>
        </div>

      </section>

  
        <section id="experiment-article-section-6">
      
          <div id="experiment-article-section-6-icon" 
          class="icon">
	    <!-- Enclose the icon image of your lab.-->
	    <img src="../images/quizzes.jpg" />
	  </div>

          <div id="experiment-article-section-6-heading" 
          class="heading">
            Quizzes
          </div>

          <div id="experiment-article-section-6-content" 
          class="content">
            
           <p>
Here are some questions that help you understand the stack data structure better.
<p> Can we also evaluate an infix expression by first converting it into a prefix expression, and then evaluating the prefix expression? Where are the operands for an operator in a prefix expression? 
</p>
</p>

 <p> In our example so far, we have implemented the stack as an array by restricting the access model to only one index. We will now study other possible implementations of a stack data structure.

<p> Study the queue data structure in the notes provided. Design an implementation scheme for a stack using only queue operations.
<p> Use a linked list to implement a stack. What are the advantages and disadvantages of this model.

<p> Another line of thought is to see how the stack data structure can be useful with small modifications. A peekStack is a data structure that allows one to peek at any element, but pop only the top element. Are there any applications of this facility? 

<p> Think of your own modification to the stack along with a motivating application(s).

</p>

          </div>

        </section>
		
        <section id="experiment-article-section-8">
   
          <div id="experiment-article-section-8-icon" 
          class="icon">
	    <!-- Enclose the icon image of your lab.-->
	    <img src="../images/readings.jpg" />
	  </div>

          <div id="experiment-article-section-8-heading" 
          class="heading">
            Further Readings
          </div>

          <div id="experiment-article-section-8-content" 
          class="content">
            
	
<p> The following are the reasons that a stack has helped us in the process. 
<p> 1. When evaluating a postfix expression, we needed that the operands are readily available for any operator. Indeed the property of the postfix expression is that the operands are the previous two positions to the left of an operator. 
<p> 2. When converting an infix expression to a postfix expression, we required that the operands are completely decided before writing an operator to the output. This also again weighed our decision in favour of using a stack.
<p> 3. In essence, it is the fact that expressions reqiure very little global information that also meant that a stack is useful. 
<p> 4. other applications that can thus benefit from a stack are undo/redo operations in editors, supporting recursion, and the like.</li>

<p> <li>A presentation that essentially presents the above material can be accessed in <a href="#" onClick='window.open("slides-week4.ppt","slides-week4.ppt","height=800,width=800")'>ExpressionEvaluation.PPT.</a></li> 

	<li> <a href="#" onClick='window.open("week4.pdf","week4.pdf","height=400,width=400")'>ExpressionEvaluation.Pdf.</a></li>
\\
<li>
<li>
    The lecture notes provided and several text books on data structures are excellent resources for further reading.</li></p>


          </div>

        </section>

      </div>


    <!-- An article can have a sidebar that contain related 
    links and additional material (however it is kept optional 
    at this moment) -->
    <aside id="lab-article-sidebar" class="default">
      <!-- put the content that you want to appear in the 
      sidebar -->	
    </aside>


    <!-- Article footer can display related content and 
    additional links -->						
    <footer id="lab-article-footer" class="default">
      <!-- Put the content that you want to appear here -->
    </footer>

  </article>


  <!-- Links to other labs, about us page can be kept the lab 
  footer-->
  <footer id="lab-footer" class="default">
    <!-- Put the content here-->
  </footer>

</div>		

</body>
</html>
